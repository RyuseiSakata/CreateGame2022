#ifndef _COMMON_H_
#define _COMMON_H_

/* \ï¿½ï¿½ï¿½\ï¿½ï¿½ï¿½\ï¿½ï¿½ï¿½\ï¿½ï¿½ï¿½\ï¿½ï¿½ï¿½\ï¿½ï¿½ï¿½\ï¿½ï¿½ï¿½ */
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <math.h>
#include <iostream>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<assert.h>
#include "glm/glm.hpp"
#include <vector>


#define PORT			(u_short)88888	/* ?��????��?????��?ò?��????��????��?????��????��?????��????��?????��????��?????��?????��????��???? */
#define MAX_CLIENTS		4				/* ?��????��?????��????��?????��????��?????��?±\?��?ð?��????��?????��????��?????��????��?????��????��?????��?²?��????��????��?????��????��?????��????��?ë?��????��?????��????��?????��????��?????��????��?????��????��???? */
#define MAX_NAME_SIZE	10 				/* ?��????��?????��????��?????��????��?????��????��?????��????��?????��????��?????��?????��????��?????��????��?ë?��????��?????��????��?????��????��?????��????��?????��????��????*/
#define MAX_BULLET_NUM   25    // 弾�?????大�??
#define BULLET_SPEED   0.5f     // 弾�?????�??

#define MAX_DATA		200				/* ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½???��?¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½???��?¿½ë?��?ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½? */

#define PLAYERDATA_COMMAND 's'
#define END_COMMAND 'e'
#define BULLETDATA_COMMAND 'b'

#define BULLET_RADIUS 0.3 //���Ⱦ��

/* ������Ƚ��ε�? */
class Sphere{
    public:
    float radius;
    glm::vec3 pos;
    Sphere(float r = 1,glm::vec3 m = glm::vec3(0,0,0)){radius = r; pos = m;}
};

class Player{
public:
    int type;
    float spead;
    glm::vec3 pos;
    glm::vec3 dir;
    glm::vec3 upVec;
    float turn1;
    float turn2;
    float turn3;
    int mp;
    int hp;
    int reloadTime;
    Sphere collider;
};

/* 弾�??????????? */
class BULLET{
    public:
        //int type;           // 弾�??�??�??
        glm::vec3 pos;      // 弾�??座�??
        //glm::vec3 speed;    // 弾�?????�??
        glm::vec3 dir;      // 弾�????��??????????????
        int lifetime;       // 弾�??�??示�?????
        BULLET(){pos.x = pos.y = pos.z = dir.x = dir.y = dir.z = 0;};
        BULLET(const BULLET& b){
            pos = b.pos;
            dir = b.dir;
            lifetime = b.lifetime;
        }
};

typedef enum {
    State_Title,
    State_Play,
    State_Result,
}GameState;

#endif 