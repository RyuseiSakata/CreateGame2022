#include "server.h"
#include <netinet/in.h>
static void SetIntData2DataBlock(void *data,int intData,int *dataSize);
static void SetCharData2DataBlock(void *data,char charData,int *dataSize);

int readNum = 0; //???若욍?욕?사?녜??渶???녜??渶???녜?????????渶????
/*****************************************************************
????	: ExecuteCommand
???	: ??????????????????????????????
		  ??????????????????????
????	: char	command		: ???????
		  int	pos			: ??????????????????????????
????	: ?????????????????????????????????0???????
		  ?????????1?????
*****************************************************************/
int ExecuteCommand(char command,int pos)
{
    unsigned char	data[MAX_DATA];
    int			dataSize,intData;
    int			endFlag = 1;


    switch(command){

        case PLAYERDATA_COMMAND:{
            dataSize = 0;
            Player *p = (Player*)malloc(sizeof(Player));
            RecvData(pos, p, sizeof(Player)); //Player???櫻얍만??녜??渶???녜??渶???녜??渶???녜??渶???녜???
            player[pos] = *p; //Player???櫻얍만??녜??渶???녜??渶???녕??
            free(p);
        }
            
            readNum |= (1 << pos); //???渶???녜??餘???ｃ????녜??渶???녜???????ㅹ??渶???녜??渶???녜??渶???녑난???渶???녑?ㅹ??渶???? 1101???渶????client[2]???曆?欲밭?녜??渶???녜??餘???ｃ???????녜??渶????
            if(readNum == (15>>(4-gClientNum))){
			    SendData(ALL_CLIENTS,&command,sizeof(char));
                SendData(ALL_CLIENTS,player,sizeof(Player)*gClientNum); //Player???渶???녜??渶???녜??渶???녜??渶???녜??渶???녜??渶???녜??渶???녜???

                readNum = 0;
            }
            
            break;
        
        case BULLETDATA_COMMAND:{
            BULLET b;
            RecvData(pos, &b, sizeof(BULLET));#include "server.h"
#include <netinet/in.h>
static void SetIntData2DataBlock(void *data,int intData,int *dataSize);
static void SetCharData2DataBlock(void *data,char charData,int *dataSize);

int readNum = 0; //???å®¿ã?¿å?»ç?³é??ç·???³é??ç·???³é?????????ç·????
/*****************************************************************
????	: ExecuteCommand
???	: ??????????????????????????????
		  ??????????????????????
????	: char	command		: ???????
		  int	pos			: ??????????????????????????
????	: ?????????????????????????????????0???????
		  ?????????1?????
*****************************************************************/
int ExecuteCommand(char command,int pos)
{
    unsigned char	data[MAX_DATA];
    int			dataSize,intData;
    int			endFlag = 1;


    switch(command){

        case PLAYERDATA_COMMAND:{
            dataSize = 0;
            Player *p = (Player*)malloc(sizeof(Player));
            RecvData(pos, p, sizeof(Player)); //Player???å¡¾å¸¸??³é??ç·???³é??ç·???³é??ç·???³é??ç·???³é???
            player[pos] = *p; //Player???å¡¾å¸¸??³é??ç·???³é??ç·???³ç??
            free(p);
        }
            
            readNum |= (1 << pos); //???ç·???³é??æ®???£ã????³é??ç·???³é???????¤é??ç·???³é??ç·???³é??ç·???³å³­???ç·???³å?¤é??ç·???? 1101???ç·????client[2]???æ·?é°¹ç?³é??ç·???³é??æ®???£ã???????³é??ç·????
            if(readNum == (15>>(4-gClientNum))){
			    SendData(ALL_CLIENTS,&command,sizeof(char));
                SendData(ALL_CLIENTS,player,sizeof(Player)*gClientNum); //Player???ç·???³é??ç·???³é??ç·???³é??ç·???³é??ç·???³é??ç·???³é??ç·???³é???

                readNum = 0;
            }
            
            break;
        
        case BULLETDATA_COMMAND:{
            BULLET b;
            RecvData(pos, &b, sizeof(BULLET));
			for(int i = 0; i < gClientNum; i++){
                if(i != pos){
                    SendData(i,&command,sizeof(char));
                }
            } 
            for(int i = 0; i < gClientNum; i++){
                if(i != pos){
                    SendData(i, &b, sizeof(BULLET));
                }
            }
        }
        break;

        case RANKING_DATA:
            game.ranking.push_back(pos); //?????³ã?­ã?³ã?°ã??????????¤ã?¢ã?³ã??????�·ã??è¿½å??
            
            /*??????????????¼ã?¿ã???????¾ã?£ã??????????¶ã???????¸ã??ç§»å????????????????????????????????*/
            if(game.ranking.size() == gClientNum-1){
                
                /* 1ä½????????????¤ã?¢ã?³ã?????????????§è¿½??? */
                for(int cnum=0; cnum<gClientNum; cnum++){
                    auto itr = std::find(game.ranking.begin(),game.ranking.end(), cnum);
                    
                    if(itr == game.ranking.end()){
                        //cnum?????¿ã?¤ã?????????????£ã?????
                        game.ranking.push_back(cnum);
                        break;
                    }
                }
                /* ?????³ã?­ã?³ã?°é??????????????????????????????????? */
                std::reverse(game.ranking.begin(),game.ranking.end());

               

                int *p = (int*) malloc(sizeof(int)*gClientNum);
                for(int i=0; i<gClientNum; i++){
                    p[i] = game.ranking[i];
                }
                
                SendData(ALL_CLIENTS,&command,sizeof(char));
                SendData(ALL_CLIENTS,p,sizeof(int)*gClientNum);

                free(p);

                endFlag = 0;
            }
            break;
        case SCOREBALL_COMMAND:
            {
                ScoreBall s;
                RecvData(pos, &s, sizeof(ScoreBall));
                for(int i = 0; i < gClientNum; i++){
                    if(i != pos){
                        SendData(i,&command,sizeof(char));
                    }
                }
                for(int i = 0; i < gClientNum; i++){
                    if(i != pos){
                        SendData(i, &s, sizeof(ScoreBall));
                    }
                }
            }
            break;
	    case END_COMMAND:
			dataSize = 0;
			/* ??????????????? */
			SetCharData2DataBlock(data,command,&dataSize);

			/* ???????????????? */
			SendData(ALL_CLIENTS,data,dataSize);

			endFlag = 0;
			break;
	  default:
			/* ?????????????????????? */
			fprintf(stderr,"0x%02x is not command!\n",command);
    }
    return endFlag;
}

/*****
static
*****/
/*****************************************************************
????	: SetIntData2DataBlock
???	: int ?????????????????????????????????????
????	: void		*data		: ??????????
		  int		intData		: ???????????????
		  int		*dataSize	: ???????????????????????
????	: ???
*****************************************************************/
static void SetIntData2DataBlock(void *data,int intData,int *dataSize)
{
    int tmp;

    /* ??????????????? */
    assert(data!=NULL);
    assert(0<=(*dataSize));

    tmp = htonl(intData);

    /* int ???????????????????????????????????? */
    memcpy(data + (*dataSize),&tmp,sizeof(int));
    /* ????????????????? */
    (*dataSize) += sizeof(int);
}

/*****************************************************************
????	: SetCharData2DataBlock
???	: char ?????????????????????????????????????
????	: void		*data		: ??????????
		  int		intData		: ???????????????
		  int		*dataSize	: ???????????????????????
????	: ???
*****************************************************************/
static void SetCharData2DataBlock(void *data,char charData,int *dataSize)
{
    /* ??????????????? */
    assert(data!=NULL);
    assert(0<=(*dataSize));

    /* int ???????????????????????????????????? */
    *(char *)(data + (*dataSize)) = charData;
    /* ????????????????? */
    (*dataSize) += sizeof(char);
}


			for(int i = 0; i < gClientNum; i++){
                if(i != pos){
                    SendData(i,&command,sizeof(char));
                }
            } 
            for(int i = 0; i < gClientNum; i++){
                if(i != pos){
                    SendData(i, &b, sizeof(BULLET));
                }
            }
        }
        break;

        case RANKING_DATA:
            game.ranking.push_back(pos); //?????녈?�?녈?겹??????????ㅳ?㏂?녈??????룔??瓦썲??
            
            /*??????????????쇈?욍???????얇?ｃ??????????뜰???????멥??燁삣????????????????????????????????*/
            if(game.ranking.size() == gClientNum-1){
                
                /* 1鵝????????????ㅳ?㏂?녈?????????????㎬옙??? */
                for(int cnum=0; cnum<gClientNum; cnum++){
                    auto itr = std::find(game.ranking.begin(),game.ranking.end(), cnum);
                    
                    if(itr == game.ranking.end()){
                        //cnum?????욍?ㅳ?????????????ｃ?????
                        game.ranking.push_back(cnum);
                        break;
                    }
                }
                /* ?????녈?�?녈?곈??????????????????????????????????? */
                std::reverse(game.ranking.begin(),game.ranking.end());

               

                int *p = (int*) malloc(sizeof(int)*gClientNum);
                for(int i=0; i<gClientNum; i++){
                    p[i] = game.ranking[i];
                }
                
                SendData(ALL_CLIENTS,&command,sizeof(char));
                SendData(ALL_CLIENTS,p,sizeof(int)*gClientNum);

                free(p);

                endFlag = 0;
            }
            break;

	    case END_COMMAND:
			dataSize = 0;
			/* ??????????????? */
			SetCharData2DataBlock(data,command,&dataSize);

			/* ???????????????? */
			SendData(ALL_CLIENTS,data,dataSize);

			endFlag = 0;
			break;
	  default:
			/* ?????????????????????? */
			fprintf(stderr,"0x%02x is not command!\n",command);
    }
    return endFlag;
}

/*****
static
*****/
/*****************************************************************
????	: SetIntData2DataBlock
???	: int ?????????????????????????????????????
????	: void		*data		: ??????????
		  int		intData		: ???????????????
		  int		*dataSize	: ???????????????????????
????	: ???
*****************************************************************/
static void SetIntData2DataBlock(void *data,int intData,int *dataSize)
{
    int tmp;

    /* ??????????????? */
    assert(data!=NULL);
    assert(0<=(*dataSize));

    tmp = htonl(intData);

    /* int ???????????????????????????????????? */
    memcpy(data + (*dataSize),&tmp,sizeof(int));
    /* ????????????????? */
    (*dataSize) += sizeof(int);
}

/*****************************************************************
????	: SetCharData2DataBlock
???	: char ?????????????????????????????????????
????	: void		*data		: ??????????
		  int		intData		: ???????????????
		  int		*dataSize	: ???????????????????????
????	: ???
*****************************************************************/
static void SetCharData2DataBlock(void *data,char charData,int *dataSize)
{
    /* ??????????????? */
    assert(data!=NULL);
    assert(0<=(*dataSize));

    /* int ???????????????????????????????????? */
    *(char *)(data + (*dataSize)) = charData;
    /* ????????????????? */
    (*dataSize) += sizeof(char);
}

